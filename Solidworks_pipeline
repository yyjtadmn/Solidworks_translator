def gv
def groupDir
def BUILD_PROCESS_FLAG
def BUILD_AGENT='pni6w2981_yyjtadmn_windows'

pipeline {
    agent any
	parameters {
		string(name: 'SolidworksRelease', defaultValue: 'SWV23.0', description : 'Provide the Solidworks Translator Version to create the build.')
		string(name: 'GroupPath', defaultValue: 'J://Group_build/SW', description : 'Path where build unit for the run is to be created.')
		string(name: 'GroupName', defaultValue: 'Group_SW2023.0', description : 'Name of the group in DMS.')
	}
    stages {
		stage('check') {
            agent { label "${BUILD_AGENT}" }
            steps {
                script{
                    echo  "checking if any new CP has been submitted or not."
                    def stdout = bat(returnStdout: true , script: './Scripts/check_CPList.bat ${params.GroupName}').trim()
                    result = stdout.readLines().drop(1).join(" ")
                    if (result.equals("0")) {                                          
                      echo "Skipping Stagging and deploy as no new CP submitted to group"
		      BUILD_PROCESS_FLAG=false	
                    } 
                    else {                                   
                        echo "total number of CP submitted for this build is ${result}"
			BUILD_PROCESS_FLAG=true
                    } 
			    }
            }
        }
        stage('Build') {
            agent { label "${BUILD_AGENT}" }
	    when {
			expression { "${BUILD_PROCESS_FLAG}"=="true" }
		}
            steps {
                script{
                groupDir ="${params.GroupPath}/${params.SolidworksRelease}"
                echo  "Build started for the group at ${groupDir}"
                bat """ ./Scripts/sw_groupBuild20.bat ${groupDir} """
			    }
            }
        }
        stage('Copy') {
            agent { label "${BUILD_AGENT}" }
	    when {
			expression { "${BUILD_PROCESS_FLAG}"=="true" }
		}
            steps {
            script{
                echo  "Copy binaries from the group ${groupDir} to locally installed directory"
                bat """ J:/Group_build/Group_build_scripts/SolidWorks/pipeline/Scripts/copy_solidworks2020kit.bat """ 
			    }
            }
        }
	stage('Test') {
            agent { label "${BUILD_AGENT}" }
	    when {
			expression { "${BUILD_PROCESS_FLAG}"=="true" }
		}
            steps {
            script{
                echo  "Test started for the group at ${groupDir}"
                bat """ ./Scripts/SolidWorks_group_regrun_dummy.bat ${groupDir} """ 
			    }
            }
        }
    }

    post {
		
        success {
            echo 'All tasks completed successfully.'
        }
		failure {
			echo 'One or more stages have failed.'
		}
		always {
			echo 'Running Solidworks Group activities completed.'					
		}
		
    }
}
